tile = c("Esri.WorldTopoMap"), # appearance of the map,
zoom.control = T, # add zoom control
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
popup = paste(andivill$village, "(", andivill$inhabitants, ",", andivill$census, ")")) # popup showing village name, number of inhabitants and the year of the census
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
getwd()
library(tidyverse)
library(lingtypology)
# Map - Andi + neighbours -------------------------------------------------
# load data - load a subset of our enormous dataframe with villages where EC languages are spoken
andic <- read_tsv("andic.csv")
# (remove duplicated villages inherited from the original large file)
andic2 <- andic[!duplicated(andic$village),]
# customize the order of elements in the legend (order is alphabetical by default)
andic2$aff <- factor(andic2$aff, levels = c("Chechen", "Avar", "Andi", "other Andic"))
# draw a map
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.WorldTopoMap"), # appearance of the map,
zoom.control = T, # add zoom control
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
# NB. Due to the pipe, we can use different tiles (map appearances) for the actual map (Esri.WorldGrayCanvas)
# and the minimap (Esri.WorldTopoMap)
# Map - Andi villages -----------------------------------------------------
# load data on Andi villages with census data
andivill <- read_tsv("andivill.csv")
# customize the order of elements in the legend
andivill$dialect <- factor(andivill$dialect, levels = c("upper", "lower", "x"))
# map with a large scale overview of all villages by dialect group
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
popup = paste(andivill$village, "(", andivill$inhabitants, ",", andivill$census, ")")) # popup showing village name, number of inhabitants and the year of the census
# map with village names
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
label = andivill$label, # add a label to each dot showing the village name (I added empty values for the non-core villages)
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
zoom.control = T,
popup = paste(andivill$village, "(", andivill$inhabitants, ",", andivill$census, ")")) # popup showing village name, number of inhabitants and the year of the census
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
zoom.control = T,
label = andivill$label, # add a label to each dot showing the village name (I added empty values for the non-core villages)
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
install.packages("ggplot2")
rm(list=ls())
library(ggplot2)
library(tidyverse)
library(ggplot2)
library(tidyverse)
pnarr <- read_tsv("narr.csv")
summary(pnarr$п)
table(pnarr$п)
library(Rling)
zaglaz <- pnarr[pnarr$перспектива == 'заглазная']
zaglaz <- pnarr[pnarr$перспектива == 'заглазная',]
neglaz <- pnarr[pnarr$перспектива == 'незаглазная',]
boxplot(zaglaz$п, neglaz$п)
table(pnarr$п) # deze wel
table(zaglaz)
table(zaglaz$п)
table(neglaz$п)
pz <- table(zaglaz$п)
pn <- table(neglaz$п)
barplot(pz)
barplot(pz, nz)
barplot(pz, pn)
barplot(pz)
ggplot(pz, aes(x = п)) + geom_bar(fill = "pink", colour = "black") + xlab("Form") + ylab("Number")
ggplot(pnarr, aes(x = п)) + geom_bar(fill = "pink", colour = "black") + xlab("Form") + ylab("Number")
pz <- data.frame(zaglaz$п)
View(pz)
pn <- data.frame(neglaz$п)
boxplot(pz$zaglaz.п, pn$neglaz.п)
pz <- data.frame(zaglaz$п, stringsAsFactors = T)
pn <- data.frame(neglaz$п, stringsAsFactors = T)
boxplot(pz$zaglaz.п, pn$neglaz.п)
pn <- data.frame(neglaz$п, stringsAsFactors = F)
pz <- data.frame(zaglaz$п, stringsAsFactors = F)
boxplot(pz$zaglaz.п, pn$neglaz.п)
pn <- data.frame(neglaz$п)
table(pnarr$п) # deze wel
# aantal p in beide categorieën
table(zaglaz$п)
table(neglaz$п)
ggplot(pnarr, aes(fill=перспектива, x=п))
ggplot(pnarr, aes(fill=перспектива, x=п, y=п))
ggplot(pnarr, aes(fill=перспектива, x=п))
ggplot(pnarr, aes(x=п))
ggplot(pnarr, aes(x = п)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(pnarr, aes(x = п))
ggplot(pnarr, aes(fill=перспектива, x=п)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(pnarr, aes(x = п)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(pnarr, aes(x = п, fill = перспектива)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
View(pn)
# aantal p in beide categorieën
table(zaglaz$п)
table(neglaz$п)
# aantal p in beide categorieën
count(zaglaz$п)
summary(zaglaz$п)
ggplot(pnarr, aes(fill=перспектива, x=п)) + geom_bar(position="dodge", stat = "identity")
ggplot(zaglaz, aes(x = п)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(neglaz, aes(x = п)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
x <- rbind(zaglaz, neglaz)
ggplot(x, aes(x = п)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(pnarr, aes(x = п)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
counts <- table(zaglaz$п, neglaz$п)
# aantal p in beide categorieën
table(zaglaz$п)
table(neglaz$п)
full <- data.frame(table(zaglaz$п, neglaz$п))
View(pn)
table(pn, pz)
z <- data.frame(table(pn, pz))
ggplot(pnarr, aes(x = п)) +geom_bar(stat="identity", aes(fill = перспектива))
x <- data.frame(rbind(zaglaz$п, neglaz$п))
library(plyr)
count(pnarr$п)
# aantal p in beide categorieën
cz <- count(zaglaz$п)
cn <- count(neglaz$п)
c <- rbind(cz, cn)
View(c)
c <- cbind(cz, cn)
c <- full_join(cz, cn, by = 'x')
library(tidyverse)
c <- full_join(cz, cn, by = 'x')
View(c)
colnames(c, c("p", "z", "n"))
colnames(c) <- c("p", "z", "n")
ggplot(c)
ggplot(c, aes(x=p))
ggplot(c, aes(x=p, y=z))
ggplot(c, aes(x=p, y=z)) + geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(c, aes(x=p, y=z))+ geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(c, aes(x=p))+ geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
class(c)
class(c$z)
ggplot(c, aes(x=z, y=p))+ geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(c, aes(x=z))+ geom_bar(fill = "white", colour = "black") + xlab("Form") + ylab("Number")
ggplot(c, aes(x = п)) +geom_bar(stat="identity", aes(fill = перспектива), position = "dodge")
library(ggplot2)
head(diamonds)
df <- diamonds %>%
filter(color %in% c("J", "D")) %>%
group_by(cut, color) %>%
summarise(counts = n())
View(df)
pf <- pnarr %>%
group_by(п, перспектива) %>%
summarise(counts = n())
View(pf)
ggplot(pnarr, aes(x = п, y = counts)) +geom_bar(stat="identity", aes(fill = перспектива), position = "dodge")
ggplot(pf, aes(x = п, y = counts)) +geom_bar(stat="identity", aes(fill = перспектива), position = "dodge")
pf2 <- pnarr %>%
filter(п %in% c("п")) %>%
group_by(п, перспектива) %>%
summarise(counts = n())
ggplot(pf2, aes(x = п, y = counts)) +geom_bar(stat="identity", aes(fill = перспектива), position = "dodge")
ggplot(pf, aes(x = п, y = counts)) +geom_boxplot() +xlab("form") +ylab("frequency")
library(ggplot2)
ggplot(pf, aes(x = п, y = counts)) +geom_boxplot() +xlab("form") +ylab("frequency")
rm(list=ls())
library(ggplot2)
library(tidyverse)
pnarr <- read_tsv("narr.csv")
pf <- pnarr %>%
group_by(п, перспектива) %>%
summarise(counts = n())
ggplot(pf, aes(x = п, y = counts)) +geom_bar(stat="identity", aes(fill = перспектива), position = "dodge")
pnarr <- read_tsv("narr.csv")
pf <- pnarr %>%
group_by(p, perspective) %>%
summarise(occurrence = n())
pnarr <- read_tsv("narr.csv")
pnarr <- read_tsv("pnarr.csv")
pf <- pnarr %>%
group_by(p, perspective) %>%
summarise(occurrence = n())
View(pf)
ggplot(pf, aes(x = p, y = occurrence)) +geom_bar(stat="identity", aes(fill = perspective), position = "dodge")
ggplot(pf, aes(x = perspective, y = occurrence)) +geom_bar(stat="identity", aes(fill = p), position = "dodge")
ggplot(pf, aes(x = perspective, y = occurrence)) +geom_bar(stat="identity", aes(fill = p), position = "dodge",
col = c("white", "pink", "black"))
ggplot(pf, aes(x = perspective, y = occurrence)) +geom_bar(stat="identity", aes(fill = p), position = "dodge")
ggplot(pf, aes(x = perspective,
y = occurrence)) +geom_bar(stat="identity",
aes(fill = p),
position = "dodge") + labs(x = "", fill = "form")
ggplot(pf, aes(x = perspective,
y = occurrence)) +geom_bar(stat="identity",
aes(fill = p),
position = "dodge") + labs(x = "", y = "", fill = "form")
ggplot(pf, aes(x = perspective,
y = occurrence)) +geom_bar(stat="identity",
aes(fill = p),
position = "dodge") + labs(x = "", y = "", fill = "Form")
getwd()
setwd(/home/samira/andi-counterexpectation)
setwd("/home/samira/andi-counterexpectation")
library(tidyverse)
library(lingtypology)
andic <- read_tsv("andic.csv")
andic2 <- andic[!duplicated(andic$village),]
setwd("/home/samira/andi-counterexpectation/data")
andic <- read_tsv("andic.csv")
andic2 <- andic[!duplicated(andic$village),]
andic2$aff <- factor(andic2$aff, levels = c("Chechen", "Avar", "Andi", "other Andic"))
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.WorldTopoMap"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Thunderforest.Landscape"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Stamen.Terrain"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.NatGeoWorldMap"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("HikeBike.HikeBike"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Stamen.TonerLabels"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Wikimedia"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.DeLorme"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.OceanBasemap"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
andivill <- read_tsv("andivill.csv")
andivill$dialect <- factor(andivill$dialect, levels = c("upper", "lower", "x"))
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"))
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldTopoMap"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("CartoDB.PositronNoLabels"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.OceanBasemap"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldTerrain"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
